// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
// ------------------------------------------------------------------------------------------------- module
// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
// --                                                                                                    --
// --                                                                                                    --
// --             "esp8266_control"                                                                      --
// --                                                                                                    --
// --                                                                                                    --
// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
// ---------------------------------------------------------------------------------------------- component
// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
// --                                                                                                    --
// --                                                                                                    --
// -- title       : esp8266_test                                                                         --
// -- version     : 2.0                                                                                  --
// -- framework   : arduino                                                                              --
// -- author      : goldobin a.                                                                          --
// -- company     : cardboard.ru                                                                         --
// -- data        : 08/09/2022                                                                           --
// --                                                                                                    --
// --                                                                                                    --
// -- description :                                                                                      --
// --                                                                                                    --
// --                                                                                                    --
// --             (1) библиотека диспетчера задач для ESP8266 под Arduino.                               --
// --                                                                                                    --
// --             (2) основные возможности:                                                              --
// --                 - работает с системным таймером millis()                                           --
// --                 - выбираемое количество задач                                                      --
// --                 - останов, отключение, вызов задач                                                 --
// --                 - вычисление времени до ближайшей задачи                                           --
// --                                                                                                    --
// --                                                                                                    --
// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
// --------------------------------------------------------------------------------------------------------
// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

#include <Arduino.h>

template <uint16_t _AMOUNT>

class task_control

{

public:
    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // включить микросекундный режим (true)
    // ---------------------------------------------------------------------- public

    void setMicros(bool mode)

    {
        usMode = mode;
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // тикер. вызывать как можно чаще
    // ---------------------------------------------------------------------- public

    void tick()

    {

        for (
            int i = 0;
            i < _AMOUNT;
            i++)

        {

            if (callbacks[i] && states[i])

            {

                uint32_t left = uptime() - tmrs[i];

                if (prds[i] == 0 || left >= prds[i])

                {

                    if (prds[i] > 0)

                        tmrs[i] += prds[i] * (left / prds[i]);

                    callbacks[i]();
                }
            }
        }
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // подключить функцию обработчик задачи
    // ---------------------------------------------------------------------- public

    void attach(int num, void (*handler)(), uint32_t prd = 0)

    {

        if (num >= _AMOUNT)

            return;

        callbacks[num] = *handler;
        prds[num] = prd;
        start(num);
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // отключить функцию обработчик задачи
    // ---------------------------------------------------------------------- public

    void detach(int num)

    {

        if (num >= _AMOUNT)

            return;

        callbacks[num] = NULL;
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // установить период для задачи
    // ---------------------------------------------------------------------- public

    void setPeriod(int num, uint32_t prd)

    {

        if (num >= _AMOUNT)

            return;

        prds[num] = prd;
        tmrs[num] = uptime();
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // запустить задачу
    // ---------------------------------------------------------------------- public

    void start(int num)

    {

        if (num >= _AMOUNT)

            return;

        states[num] = 1;
        tmrs[num] = uptime();
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // перезапустить задачу
    // ---------------------------------------------------------------------- public

    void restart(int num)

    {

        start(num);
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // остановить задачу
    // ---------------------------------------------------------------------- public

    void stop(int num)

    {

        if (num >= _AMOUNT)

            return;

        states[num] = 0;
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // выполнить задачу
    // ---------------------------------------------------------------------- public

    void exec(int num)

    {

        if (num >= _AMOUNT)

            return;

        callbacks[num]();
    }

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // получить время до ближайшей задачи
    // ---------------------------------------------------------------------- public

    uint32_t getLeft()

    {

        uint32_t nearPrd = UINT32_MAX;
        uint32_t tm = 0;
        uint32_t upt = uptime();

        for (
            int i = 0;
            i < _AMOUNT;
            i++)

        {

            if (callbacks[i] && states[i])

            {

                tm = upt - tmrs[i];

                if (tm >= prds[i])

                    tm = 0;

                else

                    tm = prds[i] - tm;

                if (nearPrd > tm)

                    nearPrd = tm;
            }
        }

        return nearPrd;
    }

private:
    uint32_t tmrs[_AMOUNT];
    uint32_t prds[_AMOUNT];
    uint32_t loopTime = 0;
    uint32_t loopTimeMax = 0;
    bool states[_AMOUNT];
    bool usMode = 0; // bool usMode = 1; для OS_MICROS

    // ----------------------------------------------------------------------------
    //                                                                        МЕТОД
    // выбор между millis() и micros()
    // -------------------------------------------------------------------- private

    uint32_t uptime()

    {

        return usMode ? micros() : millis();
    }

    void (*callbacks[_AMOUNT])() = {};
};
